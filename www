#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('./server/app');
var debug = require('debug')('server:server');
var http = require('http');
var Game = require('./server/modules/game');
var GameManager = require('./server/modules/games-manager');

var gamesManager = new GameManager();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log('Server is working!')

var io = require('socket.io')(server);

io.on('connection', function(socket){
    console.log('we have a connection! id = ' + socket.id);

    socket.on('find game',function(){
        // проверить возможность создания новой игры
        let newGameIsPossible = gamesManager.checkForNewGame();
        if (newGameIsPossible) { // если возможно то создать новую игру
            let playerTwoID = gamesManager.getPlayerForNewGame();
            let game = gamesManager.startGame({
                playerOne : socket.id,
                playerTwo : playerTwoID
            });

            // отправляем события о начале игры только 2 игрокам
            io.to(socket.id).to(playerTwoID).emit('game started', game.getGameData());

        } else { // если нет то поставить игрока в очередь
            gamesManager.addPlayerToQueue(socket.id);
            io.to(socket.id).emit('looking for game');
        }
    });

    // обработчик хода
    socket.on('move', function(moveData){
        let game = gamesManager.getGame(moveData.gameID);
        if (game) {
            let result = game.makeMove(moveData.row, moveData.col, socket.id);
            if (result === 'ok') {
                io.to(game.getPlayerOne()).to(game.getPlayerTwo()).emit('move', game.getGameData());
            } else if (result === 'bad move') {
                io.to(socket.id).emit('bad move');
            } else if (result === 'game over') {
                io.to(game.getPlayerOne()).to(game.getPlayerTwo()).emit('game over', game.getGameData());
                // завершаем игру
                gamesManager.deleteGame(game.getGameID());
            }
        } else {
            // TODO добавить обработку ошибки
        }
    });

    socket.on('cancel game', function(){
        console.log('user canceled game');
        let playerID = socket.id;
        // удаляем игрока из очереди, если он там был
        gamesManager.deletePlayerFromQueue(playerID);
        // если была игра с этим игроком
        let game = gamesManager.getGameByPlayerID(playerID);
        // оповещаем 2-го игрока о дисконекте 1-го
        if (game){
            let playerOneID = game.getPlayerOne();
            let playerTwoID = game.getPlayerTwo();
            if (playerID === playerOneID){
                io.to(playerTwoID).emit('opponent canceled game');
            } else {
                io.to(playerOneID).emit('opponent canceled game');
            }
            // и завершаем игру
            gamesManager.deleteGame(game.getGameID());
        }
    });

    socket.on('cancel search', function(){
        let playerID = socket.id;
        // удаляем игрока из очереди, если он там был
        gamesManager.deletePlayerFromQueue(playerID);
    });

    socket.on('disconnect', function(){
        console.log('user disconnected');
        let playerID = socket.id;
        // удаляем игрока из очереди, если он там был
        gamesManager.deletePlayerFromQueue(playerID);
        // если была игра с этим игроком
        let game = gamesManager.getGameByPlayerID(playerID);
        // оповещаем 2-го игрока о дисконекте 1-го
        if (game){
            let playerOneID = game.getPlayerOne();
            let playerTwoID = game.getPlayerTwo();
            if (playerID === playerOneID){
                io.to(playerTwoID).emit('opponent is disconnected');
                console.log('opponent with ID = ' + playerID + ' was diconected!');
                console.log('opponent with ID = ' + playerTwoID + ' was informed!');
            } else {
                io.to(playerOneID).emit('opponent is disconnected');
                console.log('opponent with ID = ' + playerID + ' was diconected!');
                console.log('opponent with ID = ' + playerOneID + ' was informed!');
            }
            // и завершаем игру
            gamesManager.deleteGame(game.getGameID());
        }
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
